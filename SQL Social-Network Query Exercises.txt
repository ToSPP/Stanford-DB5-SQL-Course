= SQL Social-Network Query Exercises =

#Q1
Find the names of all students who are friends with someone named Gabriel. 

Select name
From Highschooler
Where ID in (
Select ID2
From Friend
Join Highschooler on Friend.ID1 = Highschooler.ID
Where name = 'Gabriel'
)

--

#Q2
For every student who likes someone 2 or more grades younger than themselves, return that student's name and grade, and the name and grade of the student they like. 

Select h1.name, h1.grade, Highschooler.name, Highschooler.grade
From
(
Select ID1, ID2, name, grade
From Likes
Join Highschooler on Likes.ID1 = Highschooler.ID
) as h1
Join
Highschooler on ID2 = Highschooler.ID
Where (h1.grade - Highschooler.grade) > 1

--

#Q3
For every pair of students who both like each other, return the name and grade of both students. Include each pair only once, with the two names in alphabetical order. 

Select H1.name, H1.grade, H2.name, H2.grade
From 
Highschooler as H1,
Highschooler as H2,
(Select L1.ID1 as A, L2.ID1 as B
  from Likes L1, Likes L2
Where L1.ID1 = L2.ID2
AND L1.ID2 = L2.ID1) as H3
Where H1.ID = H3.A
AND H2.ID = H3.B
AND H1.name < H2.name

--

#Q4
Find all students who do not appear in the Likes table (as a student who likes or is liked) and return their names and grades. Sort by grade, then by name within each grade. 

Select HS.name, HS.grade
From Highschooler as HS
Where HS.ID not IN
(Select Distinct H.ID
From Highschooler as H, Likes as L
Where H.ID = L.ID1 OR H.ID = L.ID2)
Order by HS.grade, HS.name

--

#Q5
For every situation where student A likes student B, but we have no information about whom B likes (that is, B does not appear as an ID1 in the Likes table), return A and B's names and grades. 

Select H1.name, H1.grade, H2.name, H2.grade
From Likes as L, Highschooler As H1, Highschooler As H2
Where L.ID2 not in (Select L2.ID1
From Likes as L1, Likes as L2
Where L1.ID2 = L2.ID1) 
AND L.ID1 = H1.ID AND L.ID2 = H2.ID

--

#Q6
Find names and grades of students who only have friends in the same grade. Return the result sorted by grade, then by name within each grade. 

Select name, grade
From Highschooler
Where ID not in (
SELECT F.ID1
FROM Friend f, Highschooler H1, Highschooler H2
Where F.ID1 = H1.ID and F.ID2 = H2.ID AND H1.grade <> H2.grade)
Order by grade, name

--

#Q7
For each student A who likes a student B where the two are not friends, find if they have a friend C in common (who can introduce them!). For all such trios, return the name and grade of A, B, and C. 

Select H1.name, H1.grade, H2.name, H2.grade, H3.name, H3.grade
From (Select L1.ID1, L1.ID2
From Likes L1
Where L1.ID1 not in
(Select L.ID1
From Likes L, Friend F 
Where L.ID1 = F.ID1 And L.ID2 = F.ID2)) as P, Friend F1, Friend F2, 
Highschooler H1, Highschooler H2, Highschooler H3
Where P.ID1 = F1.ID1 AND P.ID2 = F2.ID1 AND F1.ID2 = F2.ID2 
AND P.ID1 = H1.ID AND P.ID2 = H2.ID AND F1.ID2 = H3.ID
Order by H1.name

--

#Q8
Find the difference between the number of students in the school and the number of different first names. 

Select A.C1 - B.C2
From
(Select count(*) as C1
From Highschooler) as A, (Select count(*) as C2 From (Select Distinct name From Highschooler)) as B

--

#Q9
Find the name and grade of all students who are liked by more than one other student. 

Select name, grade
From (Select ID2, count(*)
From Likes
Group by ID2
Having count(*) > 1), Highschooler
Where ID2 = ID

--